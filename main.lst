   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 4865 6C6C 		.string	"Hello "
  12      6F20 00
  13               		.text
  14               	.global	task08
  16               	task08:
  17               	.LFB17:
  18               		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include "system/system.h"
   4:main.c        **** #include "lib/uart.h"
   5:main.c        **** #include "lib/gpio.h"
   6:main.c        **** #include "lib/delay.h"
   7:main.c        **** #include "lib/pirc_lcd/LCD_Ili9341.h"
   8:main.c        **** #include <stdbool.h>
   9:main.c        **** 
  10:main.c        **** volatile int a = 0;
  11:main.c        **** Mutex *mutex = NULL;
  12:main.c        **** 
  13:main.c        **** 
  14:main.c        **** 
  15:main.c        **** void task08(void *paramters)
  16:main.c        **** {
  19               		.loc 1 16 1 view -0
  20               		.cfi_startproc
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
  25               	.LVL0:
  26               	.L2:
  17:main.c        ****     while(1){
  27               		.loc 1 17 5 discriminator 1 view .LVU1
  18:main.c        ****         osMutexLock(mutex);
  28               		.loc 1 18 9 discriminator 1 view .LVU2
  29 0000 8091 0000 		lds r24,mutex
  30 0004 9091 0000 		lds r25,mutex+1
  31 0008 0E94 0000 		call osMutexLock
  32               	.LVL1:
  19:main.c        ****         printf("Hello \n");
  33               		.loc 1 19 9 discriminator 1 view .LVU3
  34 000c 80E0      		ldi r24,lo8(.LC0)
  35 000e 90E0      		ldi r25,hi8(.LC0)
  36 0010 0E94 0000 		call puts
  37               	.LVL2:
  20:main.c        ****         osMutexUnlock(mutex);
  38               		.loc 1 20 9 discriminator 1 view .LVU4
  39 0014 8091 0000 		lds r24,mutex
  40 0018 9091 0000 		lds r25,mutex+1
  41 001c 0E94 0000 		call osMutexUnlock
  42               	.LVL3:
  21:main.c        ****         osWait(100);
  43               		.loc 1 21 9 discriminator 1 view .LVU5
  44 0020 84E6      		ldi r24,lo8(100)
  45 0022 90E0      		ldi r25,0
  46 0024 0E94 0000 		call osWait
  47               	.LVL4:
  17:main.c        ****         osMutexLock(mutex);
  48               		.loc 1 17 10 discriminator 1 view .LVU6
  49 0028 00C0      		rjmp .L2
  50               		.cfi_endproc
  51               	.LFE17:
  53               		.section	.rodata.str1.1
  54               	.LC1:
  55 0007 776F 726C 		.string	"world "
  55      6420 00
  56               		.text
  57               	.global	task09
  59               	task09:
  60               	.LFB18:
  22:main.c        ****     }
  23:main.c        **** }
  24:main.c        **** 
  25:main.c        **** void task09(void *paramters)
  26:main.c        **** {
  61               		.loc 1 26 1 view -0
  62               		.cfi_startproc
  63               	/* prologue: function */
  64               	/* frame size = 0 */
  65               	/* stack size = 0 */
  66               	.L__stack_usage = 0
  67               	.LVL5:
  68               	.L4:
  27:main.c        ****     while(1)
  69               		.loc 1 27 5 discriminator 1 view .LVU8
  28:main.c        ****     {
  29:main.c        ****         osMutexLock(mutex);
  70               		.loc 1 29 9 discriminator 1 view .LVU9
  71 002a 8091 0000 		lds r24,mutex
  72 002e 9091 0000 		lds r25,mutex+1
  73 0032 0E94 0000 		call osMutexLock
  74               	.LVL6:
  30:main.c        ****         printf("world \n");
  75               		.loc 1 30 9 discriminator 1 view .LVU10
  76 0036 80E0      		ldi r24,lo8(.LC1)
  77 0038 90E0      		ldi r25,hi8(.LC1)
  78 003a 0E94 0000 		call puts
  79               	.LVL7:
  31:main.c        ****         osMutexUnlock(mutex);
  80               		.loc 1 31 9 discriminator 1 view .LVU11
  81 003e 8091 0000 		lds r24,mutex
  82 0042 9091 0000 		lds r25,mutex+1
  83 0046 0E94 0000 		call osMutexUnlock
  84               	.LVL8:
  32:main.c        ****         osWait(100);
  85               		.loc 1 32 9 discriminator 1 view .LVU12
  86 004a 84E6      		ldi r24,lo8(100)
  87 004c 90E0      		ldi r25,0
  88 004e 0E94 0000 		call osWait
  89               	.LVL9:
  27:main.c        ****     {
  90               		.loc 1 27 10 discriminator 1 view .LVU13
  91 0052 00C0      		rjmp .L4
  92               		.cfi_endproc
  93               	.LFE18:
  95               	.global	draw_rect
  97               	draw_rect:
  98               	.LVL10:
  99               	.LFB19:
  33:main.c        ****     }
  34:main.c        **** }
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** 
  40:main.c        **** typedef struct obj_draw_str
  41:main.c        **** {
  42:main.c        ****     uint16_t prev_x, prev_y;
  43:main.c        ****     uint16_t prev_h, prev_w;
  44:main.c        ****     uint16_t prev_color;
  45:main.c        **** } obj_draw;
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** typedef struct mem_screen_type
  49:main.c        **** {
  50:main.c        ****     uint8_t active_screen[240/2][320/2];
  51:main.c        **** } mem_screen;
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** void draw_rect(obj_draw *obj, int x, int y, int w, int h,int color)
  55:main.c        **** {
 100               		.loc 1 55 1 view -0
 101               		.cfi_startproc
 102               		.loc 1 55 1 is_stmt 0 view .LVU15
 103 0054 8F92      		push r8
 104               	.LCFI0:
 105               		.cfi_def_cfa_offset 3
 106               		.cfi_offset 8, -2
 107 0056 9F92      		push r9
 108               	.LCFI1:
 109               		.cfi_def_cfa_offset 4
 110               		.cfi_offset 9, -3
 111 0058 AF92      		push r10
 112               	.LCFI2:
 113               		.cfi_def_cfa_offset 5
 114               		.cfi_offset 10, -4
 115 005a BF92      		push r11
 116               	.LCFI3:
 117               		.cfi_def_cfa_offset 6
 118               		.cfi_offset 11, -5
 119 005c CF92      		push r12
 120               	.LCFI4:
 121               		.cfi_def_cfa_offset 7
 122               		.cfi_offset 12, -6
 123 005e DF92      		push r13
 124               	.LCFI5:
 125               		.cfi_def_cfa_offset 8
 126               		.cfi_offset 13, -7
 127 0060 EF92      		push r14
 128               	.LCFI6:
 129               		.cfi_def_cfa_offset 9
 130               		.cfi_offset 14, -8
 131 0062 FF92      		push r15
 132               	.LCFI7:
 133               		.cfi_def_cfa_offset 10
 134               		.cfi_offset 15, -9
 135 0064 0F93      		push r16
 136               	.LCFI8:
 137               		.cfi_def_cfa_offset 11
 138               		.cfi_offset 16, -10
 139 0066 1F93      		push r17
 140               	.LCFI9:
 141               		.cfi_def_cfa_offset 12
 142               		.cfi_offset 17, -11
 143 0068 CF93      		push r28
 144               	.LCFI10:
 145               		.cfi_def_cfa_offset 13
 146               		.cfi_offset 28, -12
 147 006a DF93      		push r29
 148               	.LCFI11:
 149               		.cfi_def_cfa_offset 14
 150               		.cfi_offset 29, -13
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 12 */
 154               	.L__stack_usage = 12
 155 006c EC01      		movw r28,r24
 156 006e 6B01      		movw r12,r22
 157 0070 4A01      		movw r8,r20
 158 0072 7901      		movw r14,r18
 159               	.LVL11:
 160               		.loc 1 55 1 view .LVU16
 161 0074 5801      		movw r10,r16
  56:main.c        ****     int dx = x-obj->prev_x;
 162               		.loc 1 56 5 is_stmt 1 view .LVU17
 163               	.LVL12:
  57:main.c        **** 
  58:main.c        ****     ILI9341_fillRect(x+w,0,1,w,ILI9341_RED);
 164               		.loc 1 58 5 view .LVU18
 165 0076 00E0      		ldi r16,0
 166 0078 18EF      		ldi r17,lo8(-8)
 167               	.LVL13:
 168               		.loc 1 58 5 is_stmt 0 view .LVU19
 169 007a 41E0      		ldi r20,lo8(1)
 170 007c 50E0      		ldi r21,0
 171               	.LVL14:
 172               		.loc 1 58 5 view .LVU20
 173 007e 70E0      		ldi r23,0
 174 0080 60E0      		ldi r22,0
 175               	.LVL15:
 176               		.loc 1 58 5 view .LVU21
 177 0082 C601      		movw r24,r12
 178               	.LVL16:
 179               		.loc 1 58 5 view .LVU22
 180 0084 820F      		add r24,r18
 181 0086 931F      		adc r25,r19
 182 0088 0E94 0000 		call ILI9341_fillRect
 183               	.LVL17:
  59:main.c        ****     ILI9341_fillRect(x-1,0,1,w,ILI9341_BLUE);
 184               		.loc 1 59 5 is_stmt 1 view .LVU23
 185 008c 0FE1      		ldi r16,lo8(31)
 186 008e 10E0      		ldi r17,0
 187 0090 9701      		movw r18,r14
 188 0092 41E0      		ldi r20,lo8(1)
 189 0094 50E0      		ldi r21,0
 190 0096 70E0      		ldi r23,0
 191 0098 60E0      		ldi r22,0
 192 009a C601      		movw r24,r12
 193 009c 0197      		sbiw r24,1
 194 009e 0E94 0000 		call ILI9341_fillRect
 195               	.LVL18:
  60:main.c        **** 
  61:main.c        ****     obj->prev_x = x;
 196               		.loc 1 61 5 view .LVU24
  62:main.c        ****     obj->prev_x = y;
 197               		.loc 1 62 5 view .LVU25
 198               		.loc 1 62 17 is_stmt 0 view .LVU26
 199 00a2 8882      		st Y,r8
 200 00a4 9982      		std Y+1,r9
  63:main.c        ****     obj->prev_h = h;
 201               		.loc 1 63 5 is_stmt 1 view .LVU27
 202               		.loc 1 63 17 is_stmt 0 view .LVU28
 203 00a6 AC82      		std Y+4,r10
 204 00a8 BD82      		std Y+5,r11
  64:main.c        ****     obj->prev_w = w;
 205               		.loc 1 64 5 is_stmt 1 view .LVU29
 206               		.loc 1 64 17 is_stmt 0 view .LVU30
 207 00aa FF82      		std Y+7,r15
 208 00ac EE82      		std Y+6,r14
 209               	/* epilogue start */
  65:main.c        ****     
  66:main.c        ****    
  67:main.c        **** }
 210               		.loc 1 67 1 view .LVU31
 211 00ae DF91      		pop r29
 212 00b0 CF91      		pop r28
 213               	.LVL19:
 214               		.loc 1 67 1 view .LVU32
 215 00b2 1F91      		pop r17
 216 00b4 0F91      		pop r16
 217 00b6 FF90      		pop r15
 218 00b8 EF90      		pop r14
 219               	.LVL20:
 220               		.loc 1 67 1 view .LVU33
 221 00ba DF90      		pop r13
 222 00bc CF90      		pop r12
 223               	.LVL21:
 224               		.loc 1 67 1 view .LVU34
 225 00be BF90      		pop r11
 226 00c0 AF90      		pop r10
 227               	.LVL22:
 228               		.loc 1 67 1 view .LVU35
 229 00c2 9F90      		pop r9
 230 00c4 8F90      		pop r8
 231               	.LVL23:
 232               		.loc 1 67 1 view .LVU36
 233 00c6 0895      		ret
 234               		.cfi_endproc
 235               	.LFE19:
 237               		.section	.text.startup,"ax",@progbits
 238               	.global	main
 240               	main:
 241               	.LVL24:
 242               	.LFB20:
  68:main.c        **** 
  69:main.c        **** 
  70:main.c        **** 
  71:main.c        **** int main(int argc, char* argv[])
  72:main.c        **** {
 243               		.loc 1 72 1 is_stmt 1 view -0
 244               		.cfi_startproc
 245               	/* prologue: function */
 246               	/* frame size = 0 */
 247               	/* stack size = 0 */
 248               	.L__stack_usage = 0
  73:main.c        ****     mem_screen screen_buf;
 249               		.loc 1 73 5 view .LVU38
  74:main.c        **** 
  75:main.c        ****     gpio_init();
 250               		.loc 1 75 5 view .LVU39
 251 0000 0E94 0000 		call gpio_init
 252               	.LVL25:
 253               	.L7:
  76:main.c        ****     //LCD_Init();
  77:main.c        **** #if 0
  78:main.c        ****     //ILI9341_drawFastHLine(20,80,10,ILI9341_RED);
  79:main.c        ****     int i = 0;
  80:main.c        ****     ILI9341_fillRect(i,0,20,20,ILI9341_RED);
  81:main.c        **** 
  82:main.c        ****     volatile obj_draw screen;
  83:main.c        **** 
  84:main.c        ****     memset(screen_buf.active_screen, 11, 240/2*320/2);
  85:main.c        **** 
  86:main.c        ****     for (int x=0; x<240;x++){
  87:main.c        ****         for (int y=0; y<320; y++)
  88:main.c        ****         {
  89:main.c        ****             UserPixelSetFunction(x,y, screen_buf.active_screen[x/2][y/2]);
  90:main.c        ****         }
  91:main.c        ****     }
  92:main.c        **** 
  93:main.c        ****     while(1)
  94:main.c        ****     {
  95:main.c        ****         draw_rect(&screen, i,0,20,20,ILI9341_RED);
  96:main.c        ****         _delay_ms(5);
  97:main.c        ****         
  98:main.c        ****         i++;
  99:main.c        ****         if (i > 240)
 100:main.c        ****         {
 101:main.c        ****             screen.prev_x = 0;
 102:main.c        ****             ILI9341_fillRect(i-1,0,21,20,ILI9341_BLUE);
 103:main.c        ****             ILI9341_fillRect(0,0,20,20,ILI9341_RED);
 104:main.c        ****             i = 0;
 105:main.c        ****         }
 106:main.c        ****     }
 107:main.c        **** #endif
 108:main.c        ****     while(1);
 254               		.loc 1 108 5 discriminator 1 view .LVU40
 255               		.loc 1 108 13 discriminator 1 view .LVU41
 256               		.loc 1 108 10 discriminator 1 view .LVU42
 257 0004 00C0      		rjmp .L7
 258               		.cfi_endproc
 259               	.LFE20:
 261               	.global	mutex
 262               		.section .bss
 265               	mutex:
 266 0000 0000      		.zero	2
 267               	.global	a
 270               	a:
 271 0002 0000      		.zero	2
 272               	.global	uart_input
 273               		.data
 276               	uart_input:
 277 0000 0000 00   		.zero	3
 278 0003 01        		.byte	1
 279 0004 0000 0000 		.zero	4
 280 0008 0000      		.word	0
 281 000a 0000      		.word	gs(uart_getchar)
 282 000c 0000      		.word	0
 283               	.global	uart_output
 286               	uart_output:
 287 000e 0000 00   		.zero	3
 288 0011 02        		.byte	2
 289 0012 0000 0000 		.zero	4
 290 0016 0000      		.word	gs(uart_putchar)
 291 0018 0000      		.word	0
 292 001a 0000      		.word	0
 293               		.text
 294               	.Letext0:
 295               		.file 2 "/usr/avr/include/stdint.h"
 296               		.file 3 "/usr/lib/gcc/avr/9.2.0/include/stddef.h"
 297               		.file 4 "/usr/avr/include/stdio.h"
 298               		.file 5 "/usr/avr/include/stdlib.h"
 299               		.file 6 "system/mutex.h"
 300               		.file 7 "lib/uart.h"
 301               		.file 8 "lib/pirc_lcd/ugui_config.h"
 302               		.file 9 "lib/pirc_lcd/ugui.h"
 303               		.file 10 "lib/pirc_lcd/LCD_Ili9341.h"
 304               		.file 11 "lib/gpio.h"
 305               		.file 12 "system/scheduler.h"
 306               		.file 13 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccID5FtE.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccID5FtE.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccID5FtE.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccID5FtE.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccID5FtE.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccID5FtE.s:16     .text:0000000000000000 task08
     /tmp/ccID5FtE.s:265    .bss:0000000000000000 mutex
     /tmp/ccID5FtE.s:59     .text:000000000000002a task09
     /tmp/ccID5FtE.s:97     .text:0000000000000054 draw_rect
     /tmp/ccID5FtE.s:240    .text.startup:0000000000000000 main
     /tmp/ccID5FtE.s:270    .bss:0000000000000002 a
     /tmp/ccID5FtE.s:276    .data:0000000000000000 uart_input
     /tmp/ccID5FtE.s:286    .data:000000000000000e uart_output

UNDEFINED SYMBOLS
osMutexLock
puts
osMutexUnlock
osWait
ILI9341_fillRect
gpio_init
uart_getchar
uart_putchar
__do_copy_data
__do_clear_bss
